{"version":3,"sources":["components/event/event.js","components/eventlist/event-list.js","mock-data.js","api.js","components/citysearch/citysearch.js","components/numberofevents/numberofevents.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","className","React","Component","EventList","events","this","props","map","event","id","mockData","extractLocations","location","Set","CitySearch","handleItemClicked","suggestion","setState","query","handleInputChange","locations","value","target","suggestions","filter","toUpperCase","indexOf","state","type","onChange","onClick","NumberOfEvents","numberOfEvents","App","Boolean","window","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.709405a6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Event extends React.Component{\r\n  render(){\r\n    return (\r\n      <div>\r\n        <h4 className='event-title'>title</h4>\r\n        <button className='details-button'>show more</button>\r\n        {/* here the details will show up when the button is clicked: */}\r\n        {/* <div className='details'></div>  */}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Event;","import React from 'react';\r\n\r\n//components\r\nimport Event from '../event/event';\r\n\r\nclass EventList extends React.Component {\r\n  render() {\r\n    const { events } = this.props;\r\n    return (\r\n      <ul className=\"EventList\">\r\n        {events.map(event =>\r\n          <li key={event.id}>\r\n            <Event event={event} />\r\n          </li>\r\n        )}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventList;","const mockData = [\r\n  {\r\n      \"kind\": \"calendar#event\",\r\n      \"etag\": \"\\\"3181161784712000\\\"\",\r\n      \"id\": \"4eahs9ghkhrvkld72hogu9ph3e_20200519T140000Z\",\r\n      \"status\": \"confirmed\",\r\n      \"htmlLink\": \"https://www.google.com/calendar/event?eid=NGVhaHM5Z2hraHJ2a2xkNzJob2d1OXBoM2VfMjAyMDA1MTlUMTQwMDAwWiBmdWxsc3RhY2t3ZWJkZXZAY2FyZWVyZm91bmRyeS5jb20\",\r\n      \"created\": \"2020-05-19T19:17:46.000Z\",\r\n      \"updated\": \"2020-05-27T12:01:32.356Z\",\r\n      \"summary\": \"Learn JavaScript\",\r\n      \"description\": \"Have you wondered how you can ask Google to show you the list of the top ten must-see places in London? And how Google presents you the list? How can you submit the details of an application? Well, JavaScript is doing these. :) \\n\\nJavascript offers interactivity to a dull, static website. Come, learn JavaScript with us and make those beautiful websites.\",\r\n      \"location\": \"London, UK\",\r\n      \"creator\": {\r\n      \"email\": \"fullstackwebdev@careerfoundry.com\",\r\n      \"self\": true\r\n      },\r\n      \"organizer\": {\r\n      \"email\": \"fullstackwebdev@careerfoundry.com\",\r\n      \"self\": true\r\n      },\r\n      \"start\": {\r\n      \"dateTime\": \"2020-05-19T16:00:00+02:00\",\r\n      \"timeZone\": \"Europe/Berlin\"\r\n      },\r\n      \"end\": {\r\n      \"dateTime\": \"2020-05-19T17:00:00+02:00\",\r\n      \"timeZone\": \"Europe/Berlin\"\r\n      },\r\n      \"recurringEventId\": \"4eahs9ghkhrvkld72hogu9ph3e\",\r\n      \"originalStartTime\": {\r\n      \"dateTime\": \"2020-05-19T16:00:00+02:00\",\r\n      \"timeZone\": \"Europe/Berlin\"\r\n      },\r\n      \"iCalUID\": \"4eahs9ghkhrvkld72hogu9ph3e@google.com\",\r\n      \"sequence\": 0,\r\n      \"reminders\": {\r\n      \"useDefault\": true\r\n      },\r\n      \"eventType\": \"default\"\r\n   },\r\n   {\r\n      \"kind\": \"calendar#event\",\r\n      \"etag\": \"\\\"3181159875584000\\\"\",\r\n      \"id\": \"3qtd6uscq4tsi6gc7nmmtpqlct_20200520T120000Z\",\r\n      \"status\": \"confirmed\",\r\n      \"htmlLink\": \"https://www.google.com/calendar/event?eid=M3F0ZDZ1c2NxNHRzaTZnYzdubW10cHFsY3RfMjAyMDA1MjBUMTIwMDAwWiBmdWxsc3RhY2t3ZWJkZXZAY2FyZWVyZm91bmRyeS5jb20\",\r\n      \"created\": \"2020-05-19T19:14:30.000Z\",\r\n      \"updated\": \"2020-05-27T11:45:37.792Z\",\r\n      \"summary\": \"React is Fun\",\r\n      \"description\": \"Love HTML, CSS, and JS? Want to become a cool front-end developer? \\n\\nReact is one of the most popular front-end frameworks. There is a huge number of job openings for React developers in most cities. \\n\\nJoin us in our free React training sessions and give your career a new direction. \",\r\n      \"location\": \"Berlin, Germany\",\r\n      \"creator\": {\r\n      \"email\": \"fullstackwebdev@careerfoundry.com\",\r\n      \"self\": true\r\n      },\r\n      \"organizer\": {\r\n      \"email\": \"fullstackwebdev@careerfoundry.com\",\r\n      \"self\": true\r\n      },\r\n      \"start\": {\r\n      \"dateTime\": \"2020-05-20T14:00:00+02:00\",\r\n      \"timeZone\": \"Europe/Berlin\"\r\n      },\r\n      \"end\": {\r\n      \"dateTime\": \"2020-05-20T15:00:00+02:00\",\r\n      \"timeZone\": \"Europe/Berlin\"\r\n      },\r\n      \"recurringEventId\": \"3qtd6uscq4tsi6gc7nmmtpqlct\",\r\n      \"originalStartTime\": {\r\n      \"dateTime\": \"2020-05-20T14:00:00+02:00\",\r\n      \"timeZone\": \"Europe/Berlin\"\r\n      },\r\n      \"iCalUID\": \"3qtd6uscq4tsi6gc7nmmtpqlct@google.com\",\r\n      \"sequence\": 0,\r\n      \"reminders\": {\r\n      \"useDefault\": true\r\n      },\r\n      \"eventType\": \"default\"\r\n   }\r\n];\r\nexport { mockData };","/**\r\n *\r\n * @param {*} events:\r\n * The following function should be in the “api.js” file.\r\n * This function takes an events array, then uses map to create a new array with only locations.\r\n * It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\r\n * The Set will remove all duplicates from the array.\r\n */\r\n export const extractLocations = (events) => {\r\n  var extractLocations = events.map((event) => event.location);\r\n  var locations = [...new Set(extractLocations)];\r\n  return locations;\r\n};","import React from 'react';\r\n\r\nimport {mockData} from '../../mock-data';\r\nimport { extractLocations } from '../../api';\r\n\r\nclass CitySearch extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    //state\r\n    this.state = {\r\n      query: '',\r\n      suggestions: []\r\n    }\r\n\r\n  }\r\n\r\n  //function that handles the clicked suggestion\r\n  handleItemClicked = (suggestion) => {\r\n    this.setState({\r\n      query: suggestion\r\n    });\r\n  }\r\n\r\n  //function to change 'query' when writting text in the input 'city-input'\r\n  handleInputChange = (event) => {\r\n    let locations = extractLocations(mockData);\r\n    const value = event.target.value;\r\n    const suggestions = locations.filter((location) => {\r\n      return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n    });\r\n    this.setState({\r\n      query: value,\r\n      suggestions,\r\n    });\r\n  };\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"CitySearch\">\r\n        <input type=\"text\" className=\"city-input\" value={this.state.query} onChange={this.handleInputChange} />\r\n        <ul className=\"suggestions\">\r\n          {this.state.suggestions.map((suggestion) => (\r\n            <li key={suggestion} onClick={() => this.handleItemClicked(suggestion)}>{suggestion}</li>\r\n          ))}\r\n          <li key=\"all\">\r\n            <b>see all cities</b>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CitySearch;","import React from \"react\";\r\n\r\nclass NumberOfEvents extends React.Component {\r\n  state = {\r\n    numberOfEvents: 10\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"NumberOfEvents\"> \r\n        <p>Number of Events</p>\r\n        <input\r\n          type=\"number\"\r\n          className=\"num-events\"\r\n          value={this.state.numberOfEvents}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default NumberOfEvents;","import React from 'react';\r\n\r\n//components\r\nimport EventList from './components/eventlist/event-list';\r\nimport CitySearch from './components/citysearch/citysearch';\r\nimport NumberOfEvents from './components/numberofevents/numberofevents';\r\nimport {mockData} from './mock-data';\r\nimport { extractLocations } from './api';\r\n\r\nclass App extends React.Component {\r\n  render(){\r\n    let locations = extractLocations(mockData)\r\n    return (\r\n    <div className='App'>\r\n      <CitySearch locations={locations}/>\r\n      <NumberOfEvents/>\r\n      <EventList/>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}